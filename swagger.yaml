openapi: 3.0.0
info:
  title: C2PA API
  description: API for creating, updating and validating C2PA manifests
  version: 1.0.0
  
servers:
  - url: http://localhost:3000
    description: Local development server

paths:
  /manifests:
    post:
      summary: Create a new C2PA manifest
      description: Creates a new C2PA manifest from base64 encoded file data
      operationId: createManifest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManifestCreationRequest'
      responses:
        '201':
          description: Manifest successfully created
          content:
            application/json:
              schema:
                type: string
                description: The manifest ID
                example: "3e4a2b1c-9d8e-7f6a-5b4c-3d2e1f0a9b8c"
        '400':
          description: Bad request - invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /manifests/update:
    post:
      summary: Update an existing manifest
      description: Updates a manifest by adding an ingredient
      operationId: updateManifest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManifestUpdateRequest'
      responses:
        '200':
          description: Manifest successfully updated
          content:
            application/json:
              schema:
                type: string
                description: The updated manifest ID
                example: "5f6a7b8c-9d0e-1f2a-3b4c-5d6e7f8a9b0c"
        '400':
          description: Bad request - invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /manifests/{manifestId}/validate:
    get:
      summary: Validate a manifest by ID
      description: Validates a manifest by its ID
      operationId: validateManifestById
      parameters:
        - name: manifestId
          in: path
          required: true
          description: ID of the manifest to validate
          schema:
            type: string
      responses:
        '200':
          description: Validation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManifestData'
        '404':
          description: Manifest not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /manifests/validate:
    post:
      summary: Validate a manifest from file
      description: Validates a manifest from base64 encoded file data
      operationId: validateManifestByFile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManifestValidationRequest'
      responses:
        '200':
          description: Validation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResult'
        '400':
          description: Bad request - invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    ContentCredentials:
      type: object
      required:
        - format
      properties:
        format:
          type: string
          description: MIME type of the file
          example: "image/png"
        title:
          type: string
          description: Title of the content
          example: "Landscape Photo"
        authors:
          type: array
          items:
            type: string
          description: List of content authors
          example: ["John Doe", "Jane Smith"]
        label:
          type: string
          description: Label for the content assertion
          example: "c2pa-api.actions"
        description:
          type: string
          description: Description of the content
          example: "A beautiful landscape photo"
        version:
          type: string
          description: Version of the content
          example: "1.0.0"
        action:
          type: string
          description: Action performed on content
          example: "c2pa.created"
    
    ManifestCreationRequest:
      type: object
      required:
        - fileData
        - contentCredentials
      properties:
        fileData:
          type: string
          description: Base64 encoded file data
          example: "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8z8BQDwAEhQGAhKmMIQAAAABJRU5ErkJggg=="
        contentCredentials:
          $ref: '#/components/schemas/ContentCredentials'
    
    ManifestUpdateRequest:
      type: object
      required:
        - fileData
        - contentCredentials
      properties:
        fileData:
          type: string
          description: Base64 encoded file data
          example: "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8z8BQDwAEhQGAhKmMIQAAAABJRU5ErkJggg=="
        contentCredentials:
          $ref: '#/components/schemas/ContentCredentials'
    
    ManifestValidationRequest:
      type: object
      required:
        - fileData
        - format
      properties:
        fileData:
          type: string
          description: Base64 encoded file data
          example: "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8z8BQDwAEhQGAhKmMIQAAAABJRU5ErkJggg=="
        format:
          type: string
          description: MIME type of the file
          example: "image/png"
    
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: "Failed to create manifest"
        details:
          type: string
          description: Additional error details
          example: "Please check your request body for syntax errors"
    
    ManifestData:
      type: object
      properties:
        manifest:
          type: object
          description: The manifest object
        contentCredentials:
          $ref: '#/components/schemas/ContentCredentials'
        filePath:
          type: string
          description: Path to the file
          example: "/uploads/3e4a2b1c-9d8e-7f6a-5b4c-3d2e1f0a9b8c.jpg"
        signed:
          type: boolean
          description: Whether the manifest is signed
          example: true
    
    ValidationResult:
      type: object
      properties:
        isValid:
          type: boolean
          description: Whether the manifest is valid
          example: true
        message:
          oneOf:
            - type: string
              description: Error message if invalid
            - type: object
              description: Manifest data if valid